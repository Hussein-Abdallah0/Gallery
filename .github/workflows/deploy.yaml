name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: gallerydb
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, mysql, zip, gd
          coverage: none

      - name: Copy .env for testing
        run: |
          cp backend/.env.example backend/.env.test
          echo "APP_ENV=testing" >> backend/.env.test
          echo "DB_HOST=127.0.0.1" >> backend/.env.test
          echo "DB_DATABASE=gallerydb" >> backend/.env.test
          echo "DB_USERNAME=root" >> backend/.env.test
          echo "DB_PASSWORD=1234" >> backend/.env.test

      - name: Install dependencies
        run: |
          cd backend
          composer install --no-interaction --no-scripts --prefer-dist
          cp .env.test .env
          php artisan key:generate

      - name: Run tests
        run: |
          cd backend
          php artisan config:clear
          php artisan test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-gallery:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-gallery:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Create directory if it doesn't exist
            sudo mkdir -p /var/www/gallery
            sudo chown -R ubuntu:ubuntu /var/www/gallery

            # Navigate to directory
            cd /var/www/gallery

            # Stop and remove any existing containers
            docker-compose -f docker-compose.yml down || true

            # Pull latest image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-gallery:latest

            # Copy compose file from repository
            cat << 'EOF' > docker-compose.yml
            version: "3.8"
            services:
              server:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-gallery:latest
                container_name: laravel_server
                environment:
                  - APP_ENV=production
                  - APP_DEBUG=false
                  - DB_HOST=database
                  - DB_DATABASE=gallerydb
                  - DB_USERNAME=root
                  - DB_PASSWORD=1234
                  - JWT_SECRET=pJrp4ESHr8mTpBYsQbo2gcTpyu7ZSE3rsTKw4PMvPSA7dQK9DmFHpHc0BvGITYoT
                ports:
                  - "8000:80"
                depends_on:
                  - database
                volumes:
                  - laravel_storage:/var/www/html/storage

              database:
                image: mysql:8.0
                container_name: mysql_db
                environment:
                  - MYSQL_ROOT_PASSWORD=1234
                  - MYSQL_DATABASE=gallerydb
                ports:
                  - "3306:3306"
                volumes:
                  - db_data:/var/lib/mysql

            volumes:
              db_data:
              laravel_storage:
            EOF

            # Start containers
            docker-compose -f docker-compose.yml up -d
