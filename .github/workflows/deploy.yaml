name: Deploy Laravel Application

on:
  push:
    branches: [main]

env:
  APP_ENV: testing
  DB_CONNECTION: sqlite
  DB_DATABASE: ":memory:"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, ctype, xml, dom, fileinfo, sqlite, pdo_sqlite
          coverage: none

      - name: Install dependencies
        run: |
          cd backend
          composer install --prefer-dist --no-interaction

      - name: Generate env file for testing
        run: |
          cd backend
          cp .env.example .env.testing
          echo "APP_KEY=base64:testkey123456789012345678901234567890" >> .env.testing
          echo "APP_ENV=testing" >> .env.testing
          echo "DB_CONNECTION=sqlite" >> .env.testing
          echo "DB_DATABASE=:memory:" >> .env.testing
          echo "CACHE_DRIVER=array" >> .env.testing
          echo "SESSION_DRIVER=array" >> .env.testing
          echo "QUEUE_DRIVER=sync" >> .env.testing
          echo "JWT_SECRET=testsecret123456789012345678901234567890" >> .env.testing

      - name: Run tests
        run: |
          cd backend
          php artisan config:clear
          php artisan test --env=testing

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app:latest

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Stop and remove existing container
            docker stop laravel_server || true
            docker rm laravel_server || true

            # Create and prepare storage directory structure
            sudo mkdir -p /var/www/html/storage
            sudo mkdir -p /var/www/html/storage/framework/{cache,sessions,views}
            sudo mkdir -p /var/www/html/storage/logs
            sudo chmod -R 777 /var/www/html/storage

            # Pull the latest image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app:latest

            # Run the new container with proper permissions
            docker run -d \
              --name laravel_server \
              -p 8000:80 \
              -v /var/www/html/storage:/var/www/html/storage \
              -e APP_ENV=production \
              -e APP_DEBUG=false \
              -e APP_KEY=base64:${{ secrets.APP_KEY }} \
              -e LOG_CHANNEL=stderr \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              ${{ secrets.DOCKER_HUB_USERNAME }}/laravel-app:latest

            # Wait for container to initialize
            sleep 15

            # Set proper permissions
            docker exec laravel_server chown -R www-data:www-data /var/www/html/storage
            docker exec laravel_server chmod -R 775 /var/www/html/storage
            docker exec laravel_server chmod -R 775 /var/www/html/bootstrap/cache

            # Run database migrations
            docker exec laravel_server php artisan migrate --force || true

            # Clear and cache configurations
            docker exec laravel_server php artisan config:clear
            docker exec laravel_server php artisan config:cache
            docker exec laravel_server php artisan view:clear
            docker exec laravel_server php artisan route:clear

            # Check container status
            echo "Container status:"
            docker ps -a

            # Check application health
            echo "Application health check:"
            curl -I http://localhost:8000 || true

            # Check logs
            echo "Last 50 lines of logs:"
            docker logs laravel_server --tail 50
